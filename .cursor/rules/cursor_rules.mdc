---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

# Cursor Rules

- **Required Rule Structure:**

  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks

  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;

  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

- **Advanced Examples:**
  - **Rule Composition**: Demonstrate combining multiple rule files via references.

    ```mdc
    ---
    description: Enforce Go formatting and linting across all packages
    globs: "**/*.go"
    alwaysApply: true
    ---

    - **Formatting**: Use `go fmt ./...` on save.
    - **Linting**: Run `golangci-lint run` in CI.
    - **Imports**: Use `goimports` for automatic grouping.

    Refer to @[self_improve.mdc](mdc:.cursor/rules/self_improve.mdc) for rule evolution tips.
    ```

  - **Cross-File References**: Show how to include additional context files.

    ```mdc
    @internal/logger/logger.go
    @docs/architecture.md
    ```

- **DOs & DON'Ts Recap:**

  | ✅ DO | ❌ DON'T |
  |-------|----------|
  | Provide concrete code examples | Leave guidance vague |
  | Keep rules under 500 lines | Duplicate content across rules |
  | Reference existing files with `@` | Hard-code project paths |
  | Use bullet points for clarity | Mix unrelated guidance in one rule |

  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
